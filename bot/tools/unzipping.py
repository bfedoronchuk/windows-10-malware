from typing import Optional
from zipfile import ZipFile


def find_by_extension(location: str, extension: str) -> Optional[str]:
    """
    Finds the first file with the given extension within the archive.
    :param location: location of archive
    :param extension: target file extension
    :return: Return first file name with given extension.
    """
    with ZipFile(location) as zip_file:
        files = [file for file in zip_file.namelist() if file.endswith(extension)]
        if len(files) == 0:
            return None
        target_file: str = files[0]
        return target_file


def unzip(location: str, password: str, target_file: str):
    """
    Unzip encrypted archives with executables.
    Unzipping 7-Zip archives with ZipCrypto algorithm.
    The zipfile module from the Python standard library supports only CRC32 encrypted zip files.
    Usage:
    unzip('test.zip', 'super_secret')
    :param location: location of archive
    :param password: archive password
    :param target_file: file to extract from archive
    :return: True if archive was successfully unzipped, False otherwise
    """
    try:
        with ZipFile(location) as zip_file:
            zip_file.extract(pwd=password.encode('utf-8'), member=target_file)
        return True
    except:
        return False
