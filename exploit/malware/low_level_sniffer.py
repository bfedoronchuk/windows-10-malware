import socket
import time
import netifaces


def _get_all_interfaces_ips():
    ips = []
    interfaces = netifaces.interfaces()
    for interface in interfaces:
        addresses: dict = netifaces.ifaddresses(interface)
        ipv4_info = addresses.get(socket.AF_INET)
        if not ipv4_info:
            continue
        ipv4_addr = ipv4_info[0]["addr"]
        ips.append(ipv4_addr)
    return ips


def _create_promiscuous_mode_socket(ip) -> socket.socket:
    sniffer_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
    port = 0  # means random port will be bound
    sniffer_socket.bind((ip, port))
    # include IP protocol headers
    sniffer_socket.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
    # receive all information
    sniffer_socket.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
    # make socket non blocking
    sniffer_socket.setblocking(False)
    return sniffer_socket


def _get_all_interfaces_sockets():
    sniffing_sockets = []
    for ip in _get_all_interfaces_ips():
        sniffing_socket = _create_promiscuous_mode_socket(ip)
        sniffing_sockets.append(sniffing_socket)
    return sniffing_sockets


def _check_all_sockets_packets(target_domain: str, promiscuous_mode_sockets: list):
    udp_packet_maximum_size = 65535
    buffer_size = udp_packet_maximum_size + 1
    for promiscuous_socket in promiscuous_mode_sockets:
        try:
            result = promiscuous_socket.recvfrom(buffer_size)
            data = result[0]
            if target_domain in str(data):
                return True
        except socket.error:
            continue
    return False


def listen_traffic(target_domain: str, pause: int, action: callable):
    """
    Listen traffic for target domain, and if it is found specific action is performed.
    :param target_domain: domain to search
    :param pause: minimum time period to wait to perform action next time (seconds),
                  is needed in order not to trigger action too frequently
    :param action: action to perform when target domain was found
    :return:
    """
    promiscuous_mode_sockets: list = _get_all_interfaces_sockets()
    last_time_action_called = 0
    while True:
        current_time = time.time()
        pause_exceed: bool = current_time - last_time_action_called > pause
        domain_found: bool = _check_all_sockets_packets(target_domain, promiscuous_mode_sockets)
        if domain_found and pause_exceed:
            last_time_action_called = time.time()
            action()
